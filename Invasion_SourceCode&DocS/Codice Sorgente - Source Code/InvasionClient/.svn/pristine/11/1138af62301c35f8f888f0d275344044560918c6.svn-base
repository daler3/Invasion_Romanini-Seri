package client;

import java.util.ArrayList;

import comunicazione.Client2Server;
import classiCondivise.BeanGiocatore;
import classiCondivise.BeanTavolo;
import classiCondivise.Classifica;
import classiCondivise.Colori;
import classiCondivise.StatiUtente;

/**
 * Classe che si occupa del dialogo tra la logica del client e le classi di comunicazione (che hanno visibilità di interfaccia)
 *
 */
public class Ambasciatore {
	
	/**
	 * Istanza del Server. 
	 * Se è null creo una nuova istanza 
	 */
	private static Ambasciatore INSTANCE = null; 
	
	/**
	 * Stato attuale dell'utente
	 */
	private StatiUtente statoAttuale;
	
	/**
	 * Bean del giocatore contente le info relative all'utente.
	 */
	private BeanGiocatore mieInfo;
	private Client2Server interfacciaComunicazione;
	
	private Limbo limbo = null; 
	private Tavolo tavolo = null;
	private Partita miaPartita = null;
	

	/**
	 * Costruttore privato della classe Ambasciatore. 
	 */
	private Ambasciatore() {
		this.statoAttuale = StatiUtente.NONCONNESSO;
		//this.interfacciaComunicazione = comunicazione;
	}
	
	
	/**
	 * Metodo per crea un'istanza della classe Server, se essa ancora non esiste.
	 */
	private synchronized static void createInstance() {
		if(INSTANCE == null)
			INSTANCE = new Ambasciatore();
	}
	
	/**
	 * Metodo per ottenere un riferimento alla classe Server
	 * @return l'unica istanza della classe Server
	 */
	public static Ambasciatore getInstance(){
		if(INSTANCE == null)
			createInstance();
		return INSTANCE; 
	}
	
	/**
	 * Metodo per settare l'interfaccia di comunicazione che il client utilizzerà per la comunicazione con il server.
	 * @param comunicazione - il riferimento all'interfaccia di comunicazione 
	 */
	public void setInterfacciaComunicazione(Client2Server comunicazione){
		this.interfacciaComunicazione = comunicazione;
	}
	
	
	
//	public GiocatoreLimbo getLimbo() {
//		return limbo;
//	}

	/**
	 * Setta il riferimento a una classe Limbo, e setta lo stato del giocatore a Limbo. 
	 * Cancella quindi un eventuale riferimento a tavolo e partita.
	 * @param limbo - riferimento all'oggetto Limbo. 
	 */
	public void setLimbo(Limbo limbo) {
		this.limbo = limbo;
		statoLimbo();
		this.tavolo = null; 
		this.miaPartita = null; 
	}


//	public Tavolo getTavolo() {
//		return tavolo;
//	}

	/**
	 * Setta il riferimento a una classe Tavolo, in cui l'utente è connesso, e setta lo stato del giocatore a Limbo. 
	 * Cancella quindi un eventuale riferimento a limbo e partita.
	 * @param tavolo - riferimento all'oggetto Tavolo.
	 */
	public void setTavolo(Tavolo tavolo) {
		this.tavolo = tavolo;
		statoTavolo();
		this.limbo = null; 
		this.miaPartita = null; 
	}


//	public Partita getMiaPartita() {
//		return miaPartita;
//	}

	/**
	 * Setta il riferimento a una classe Tavolo, in cui l'utente è connesso, e setta lo stato del giocatore a Limbo. 
	 * Cancella quindi un eventuale riferimento a tavolo e limbo.
	 * @param miaPartita - riferimento all'oggetto Partita
	 */
	public void setMiaPartita(Partita miaPartita) {
		this.miaPartita = miaPartita;
		statoPartita();
		this.limbo = null; 
		this.tavolo = null; 
		
	}


	/**
	 * Metodo per richiedere il login dell'utente
	 * @param username - username inserito dall'utente
	 * @param password - password inserita dall'utente
	 * @return	true - se il login è andato a buon fine; false - altrimenti.
	 */
	public boolean login(String username, String password){
		BeanGiocatore bean = interfacciaComunicazione.effettuaLogin(username, password);
		//System.out.println("Bean arrivato al Ambasciatore: "+bean.toString());
		this.mieInfo = bean;
		if(this.mieInfo == null){
			System.out.println("Credenziali errate");
			return false;
		}
		else{
			System.out.println("Login OK");
			statoLimbo();
			return true;
		}
	}

	
	/**
	 * Registrazione dell'utente.
	 * @param username
	 * @param password
	 * Se la registrazione è andata a buon fine, al termine dell'operazione l'utente sarà loggato.
	 * @return true - se la registrazione è andata a buon fine; false - altrimenti
	 */
	public boolean registrazione(String username, String password){
		BeanGiocatore bean = this.interfacciaComunicazione.effettuaRegistrazione(username, password);
		this.mieInfo = bean;
		if(this.mieInfo == null){
			System.out.println("Registrazione Fallita");
			return false;
		}
		else{
			System.out.println("Bean arrivato al Ambasciatore: "+bean.toString());
			statoLimbo();
			return true;
		}
	}
	
	/**
	 * Da Client a Server
	 * Metodo per cambiare la password
	 * @param vecchiaPassword - la vecchia password
	 * @param nuovaPassword - la nuova password
	 * @return true - se il cambio di password è andato a buon fine; false - altrimenti
	 */
	public boolean cambiaPassword(String vecchiaPassword, String nuovaPassword){
		return this.interfacciaComunicazione.cambiaPassword(vecchiaPassword, nuovaPassword);
	}
	
	
	/**
	 * Metodo per richiedere la lista dei Tavoli Aperti
	 * @return - la lista con le info dei tavoli aperti (id e numero giocatori)
	 * 
	 */
	public ArrayList<BeanTavolo> richiediListaTavoliAperti(){
		ArrayList<BeanTavolo> infoTavoli = this.interfacciaComunicazione.richiediListaTavoliAperti();
		return infoTavoli;
	}
	
	/**
	 * Da Client a Server.
	 * Metodo per ottenere le informazioni riguardanti un utente specifico
	 * @param nomeUtente - il nome dell'utente di cui se vogliono le info
	 * @return le info riguardanti l'utente richiesto
	 */
	public BeanGiocatore ottieniInfoUtente (String nomeUtente){
		return this.interfacciaComunicazione.ottieniInfoUtente(nomeUtente);
	}
	
	
	/**
	 * Da Client a Server
	 * Metodo per ottenere la classifica generale del gioco su richiesta del client
	 * @return la classifica generale
	 */
	public Classifica ottieniClassifica(){
		Classifica classificaAttuale = this.interfacciaComunicazione.chiediClassifica();
		return classificaAttuale;
	}
	
	/**
	 * L'utente riceve il bean con le proprie info
	 * @param mieInfo - Bean con le info da inviare al Client.
	 * 
	 */
	public void riceviMieInfo(BeanGiocatore mieInfo){
		this.aggiornaMieInfo(mieInfo);
		
	}
	
	/**
	 * L'utente riceve la lista aggiornata dei nomi dei giocatori con cui è attualmente seduto a un tavolo.
	 * @param nomiGiocatoriSeduti - la lista dei nomi dei giocatori attualmente seduti al tavolo con l'utente
	 * 
	 */
	public void cambiamentiTavolo(ArrayList<String> nomiGiocatoriSeduti){
		this.tavolo.aggiornaListaGiocatori(nomiGiocatoriSeduti);
	}
	
	/**
	 * Metodo per ricevere le info riguardanti i tavoli aperti
	 * @param infoTavoliAperti - lista di BeanTavoli contenenti le informazioni sui tavoli attualmente aperti (id e numero giocatori attualmente seduti)
	 * 
	 */
	public void riceviInfoTavoli(ArrayList<BeanTavolo> infoTavoliAperti){
		this.limbo.riceviInfoTavoli(infoTavoliAperti);
	}
	
	
	/**
	 * Metodo per aggiornare le info dell'utente
	 * @param mieInfo - le info dell'utente (BeanGiocatore).
	 */
	public void aggiornaMieInfo(BeanGiocatore mieInfo){
		this.mieInfo = mieInfo;
	}
	
	/**
	 * Getter per le info dell'utente corrispondente al Client.
	 * @return - le info dell'utente (BeanGiocatore).
	 */
	public BeanGiocatore getMieInfo(){
		return this.mieInfo;
	}
	
	
	/**
	 * Il giocatore richiede di creare un nuovo tavolo (a cui il creatore si aggiungerà)
	 * @return il riferimento al Tavolo creato
	 */
	public Tavolo creaTavolo(){
		Integer idTavoloCreato = this.interfacciaComunicazione.creaTavolo();
		if(idTavoloCreato != null){
			this.tavolo = new Tavolo(idTavoloCreato); 
			this.tavolo.setIoCreatore(true);
			String mioNome = getMieInfo().getNomeUtente();
			try {
				this.tavolo.joinTavolo(mioNome);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			statoTavolo();
		}
		return this.tavolo;
	}
	
	
	/**
	 * Il giocatore richiede di aggiungersi a un tavolo 
	 * Se l'aggiunta va a buon fine cambia lo stato attuale in "InTavolo."
	 * @param idtavolo					L'Id del tavolo a cui il giocatore si vuole aggiungere
	 * @return il Tavolo creato con all'interno i giocatori attualmente seduti a quel tavolo; null se non ci si è potuti aggiungere a quel tavolo
	*/
	public Tavolo joinTavolo(Integer idTavolo){
		ArrayList<String> nomiGiocatoriInTavolo = this.interfacciaComunicazione.joinTavolo(idTavolo);
		if(nomiGiocatoriInTavolo != null){
			this.tavolo = new Tavolo(idTavolo);
			this.tavolo.setIoCreatore(false);
			this.tavolo.aggiornaListaGiocatori(nomiGiocatoriInTavolo);
			statoTavolo();
			return this.tavolo;
		}
		else return null;  
	}
	
	
	public void abbandonaTavolo(){
		this.interfacciaComunicazione.abbandonaTavolo();
		this.tavolo = null; 
		statoLimbo();
	}
	
	
	public boolean avviaTavolo(Integer idTavolo){
		//filtro
		if(statoAttuale != StatiUtente.INTAVOLO){
			return false; 
		}
		if(this.tavolo.getIdTavolo() != idTavolo){
			return false; 
		}
		if(!this.tavolo.isIoCreatore()){
			return false; 
		}
		boolean esito = this.interfacciaComunicazione.avviaTavolo(idTavolo);
		return esito; 
	}
	
	
	
//	/**
//	 * Effettua tutte le operazioni necessarie per inizializzare il giocatore: riporta il giocatore come se fosse nel limbo
//	 *TODO: rivedi se poi mettiamo decorator
//	 * 
//	 */
//	private void inizializzaGiocatore(){
//		statoLimbo();
//		this.miaPartita = null;
//		this.coloreGiocatore = null;
//		this.numeroArmateDaPosizionare = null;
//		this.tuoTurno = false; 
//	}
	
	
	/**
	 * Ci mette con lo stato nel Limbo.
	 */
	private void statoLimbo(){
		this.statoAttuale = StatiUtente.LIMBO;
	}
	/**
	 * Ci mette con lo stato  InTavolo.
	 */
	private void statoTavolo(){
		this.statoAttuale = StatiUtente.INTAVOLO;
	}
	/**
	 * Ci mette con lo stato InPartita.
	 */
	private void statoPartita(){
		this.statoAttuale = StatiUtente.INPARTITA;
	}
	
	/**
	 * Ci mette con lo stato NonConnesso.
	 */
	private void statoDisconnesso(){
		this.statoAttuale = StatiUtente.NONCONNESSO;
	}


	/**
	 * Getter per lo stato attuale del giocatore
	 * @return	Lo stato del giocatore.
	 */
	public StatiUtente getStatoAttuale() {
		return statoAttuale;
	}
	
	
	
	
	/**
	 * Metodo per la disconnessione sia volontaria che involantaria del client
	 * Chiamerà il metodo disconnetti() in GiocatoreConnesso() che permette di disconnettere il giocatore dal gioco, con le relative conseguenze.
	 */
	public boolean eseguiLogout(){
		//Comunichiamo al server di volerci disconnettere
		boolean esitoLogout = this.interfacciaComunicazione.effettuaLogout();
		if(esitoLogout){
			//Cio mettiamo nello stato di disconnessi
			this.statoAttuale = StatiUtente.NONCONNESSO;
		}
		return esitoLogout;
	}
		//TODO errore killa tutto
	
	
	/**
	 * Metodo per aggiungersi a un tavolo
	 * @param idTavolo - id del tavolo a cui ci si vuole aggiungere
	 * @return true - se l'aggiunta p andata a buon fine; false - altrimenti.
	 */
//	public boolean joinTavolo(Integer idTavolo){
//		boolean esitoPositivo = this.interfacciaComunicazione.joinTavolo(idTavolo);
//		if(esitoPositivo){
//			this.sala.aggiungiTavolo(, id)
//		}
//	}
	
//	/**
//	 * Da Client a Server
//	 * Metodo per abbandonare un tavolo. 
//	 * Chiamerà il metodo abbandonaTavolo() in GiocatoreConnesso.
//	 */
//	public void abbandonaTavolo();
	
	/**
//	 * Da Server a Client
//	 * Comunica a clients nel tavolo l'aggiunta gi nuovo giocatore al tavolo.
//	 * @param username - username del giocatore che si è appena aggiunto al tavolo
//	 */
//	public void giocatoreAggiuntoATavolo(String username);
//	
//	
//	/**
//	 * Da Server a Client
//	 * Comunica a clients nel tavolo la rimozione di un altro giocatrore. 
//	 * @param username - l'username dell'utente da rimuovere dal tavolo
//	 */
//	public void giocatoreRimossoDaTavolo(String username);
	
	
//	/**
//	 * Da Server a Client
//	 * Comunica al client un cambiamento nel tavolo a cui è seduto.
//	 * @param tavolo - il tavolo aggiornato da comunicare
//	 */
//	public void comunicaCambiamentiTavolo(TavoloAperto tavolo);
//	
//	
//	/**
//	 * Da Server a Client. 
//	 * Comunica all'utente connesso la lista dei tavoli aperti
//	 * @param tavoliAperti - la lista dei tavoli aperti
//	 */
//	public void comunicaListaTavoli(ArrayList<TavoloAperto> tavoliAperti);
//	
//	/**
//	 * Da Client a Server
//	 * Comando di creare un nuovo tavolo, a cui il giocatore creatore si aggiungerà
//	 * @return - l'id del Tavolo creato
//	 */
//	public Integer creaTavolo();
//	
//	
//	/**
//	 * Da Client a Server
//	 * Comando del client di avviare il tavolo a cui ha preso parte 
//	 * @param idTavolo - l'id del tavolo che chiedo di avviare
//	 * @return true - se il tavolo verrà avviato; false - altrimenti
//	 */
//	public boolean avviaTavolo(Integer idTavolo);
//	
//	
//	
//	/**
//	 * DA QUI IN POI FACCIO I METODI RIGUARDANTI PARTITA
//	 * 
//	 * 
//	 */
//	
//	/**
//	 * Da Server a Client
//	 * Comando per dire al client che una partita a cui prenderà parte inizia
//	 * @param idPartita - id della partita appena iniziata
//	 * @param infoGiocatoriPartita - le info degli utenti che stanno prendendo parte alla partita
//	 */
//	public void iniziaPartita(Integer idPartita, ArrayList<BeanGiocatore> infoGiocatoriPartita);
//	
//	
//	/**
//	 * Da Client a Server
//	 * Metodo per abbandonare la partita. 
//	 * Chiamerà il metodo abbandonaPartita() in GiocatoreConnesso.
//	 */
//	public void abbandonaPartita();
//
//}
	
}
