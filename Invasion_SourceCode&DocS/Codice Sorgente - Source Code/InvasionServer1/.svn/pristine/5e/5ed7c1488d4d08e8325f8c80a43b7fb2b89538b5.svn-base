package server_daler;

import java.sql.SQLException;
import java.util.*;

import org.omg.CosNaming.NamingContextPackage.NotFound;

import classiCondivise.BeanGiocatore;
import classiCondivise.Classifica;
import classiCondivise.Colori;
import classiCondivise.StatiUtente;
import eccezioni.GiocatoreNonTrovatoException;
import interfacciaComunicazione.*;
import mappa.*;


/**
 *Classe che rappresenta un giocatore, ovvero un utente, che è connesso al gioco.
 *
 */

public class GiocatoreConnesso {
	
	/**
	 * Tutte le informazioni dell'utente.
	 */
	private BeanGiocatore mieInfo;
	/**
	 * Interfaccia per lo scambio di messaggi col client
	 */
	private Server2Client interfacciaComunicazione;
	
	/**
	 * Indica lo stato attuale dell'utente
	 */
	private StatiUtente statoAttuale;
	
	/**
	 * Riferimento alla classe Server
	 */
	private Server mioServer; 
	
	/**
	 * Riferimento al tavolo (non ancora chiuso, quindi la partita corrispondente non è ancora iniziata) in cui il giocatore è seduto.
	 */
	private TavoloAperto mioTavolo;
	
	
	/**
	 * Riferimento alla partita a cui l'utente sta partecipando
	 */
	private Partita miaPartita; //partita
	
	/**
	 * Colore del giocatore durante la partita
	 */
	private Colori coloreGiocatore; //partita
	
	/**
	 * Informazioni relative all'eventuale partita a cui sta partecipando
	 */
	private Integer numeroArmateDaPosizionare; //partita
	
	/**
	 * Elenco dei territori posseduti dal giocatore durante la partita 
	 */
	public ArrayList<Territorio> territoriPosseduti; //partita
	
	/**
	 * Indicase è il turno dell'utente o meno durante la partita a cui sta partecipando
	 */
	private boolean tuoTurno = false; //partita
	
	

	/**
	 * Costruttore. Chiamato non appena un client si connette e fa richiesta di registrazione o di login.
	 * @param interfacciaComunicazione - riferimento alla comunicazione, con visibilità di interfaccia, per comunicare con il client
	 */
	public GiocatoreConnesso(Server2Client interfacciaComunicazione) {
		super();
		//L'interfaccia per inviare i messaggi al client.
		this.interfacciaComunicazione = interfacciaComunicazione;
		//Quando viene istanziato il giocatore inizialmente non è connesso.
		this.statoAttuale = StatiUtente.NONCONNESSO;
		//Recuperiamo l'istanza del Server (Singleton)
		this.mioServer = Server.getInstance();
	}

	public GiocatoreConnesso(){
		//Quando viene istanziato il giocatore inizialmente non è connesso.
		this.statoAttuale = StatiUtente.NONCONNESSO;
		//Recuperiamo l'istanza del Server (Singleton)
		this.mioServer = Server.getInstance();
	}
	
	public void assegnaInterfacciaComunicazione(Server2Client interfaccia){
		this.interfacciaComunicazione = interfacciaComunicazione;
	}
	
	
	/**
	 * Effettua il login se possibile.
	 * @param username	Nome con cui effettuare il login.
	 * @param password	Password con cui effettuare il login.
	 * @return			- Il Bean con le Info del giocatore se il login è andato a buon fine; - null altrimenti	
	 */
	public BeanGiocatore loginUtente(String username, String password){
		boolean loginEffettuato = false;
		try{
			loginEffettuato = this.mioServer.aggiungiGiocatoreConnesso(this, username, password);
			if(loginEffettuato){
				//Effettua tutte le operazioni per mettere il giocatore nel Limbo.
				inizializzaGiocatore();
			} 
			else return null; //se il login non è andato a buon fine ritorno null
		}catch(SQLException e){
			System.err.println("Impossibile effettuare login");
			e.printStackTrace();
		}
		return this.mieInfo;
		//return loginEffettuato;
	}
	
	/**
	 * Effettua la registrazione se possibile. 
	 * Se la registrazione è andata a buon fine, al termine dell'operazione l'utente sarà loggato.
	 * @param username	Nome con cui effettuare la registrazione.
	 * @param password	Password con cui effettuare la registrazione.
	 * @return			Esito della registrazione.
	 */
	public BeanGiocatore registrazioneUtente(String username, String password){
		boolean registrazioneEffettuata = false;
		BeanGiocatore mioBean = null; 
		try {
			registrazioneEffettuata = this.mioServer.registraNuovoGiocatore(username, password);
			if(registrazioneEffettuata){
				//Dopo esserci registrati sul DB effettuiamo normalmente il Login
				mioBean = loginUtente(username, password);
			}	
		} catch (SQLException e) {
			System.err.println("Impossibile registrarsi");
			e.printStackTrace();
		}
		return mioBean;
	}
	
	/**
	 * Metodo per cambiare la password
	 * @param vecchiaPassword - la vecchia password
	 * @param nuovaPassword - la nuova password
	 * @return true - se il cambio di password è andato a buon fine; false - altrimenti
	 */
	public boolean cambiaPassword(String vecchiaPassword, String nuovaPassword){
		try {
			return mioServer.cambiaPassword(this, vecchiaPassword, nuovaPassword);
		} catch (SQLException e) {
			return false;
		}
	}
	
	/**
	 * Metodo per ottenere le informazioni riguardanti un utente specifico
	 * @param nomeUtente - il nome dell'utente di cui se vogliono le info
	 * @return le info riguardanti l'utente richiesto
	 */
	public BeanGiocatore ottieniInfoUtente (String nomeUtente){
		try {
			return mioServer.ottieniInfoUtente(nomeUtente);
		} catch (GiocatoreNonTrovatoException e) {
			//il giocatore non è stato trovato, non è stato quindi possibile ottenere le sue info
			e.printStackTrace();
			return null; 
		}
	}
	
	
	/**
	 * Metodo per ottenere la classifica generale del gioco su richiesta del client
	 * @return la classifica generale
	 */
	public Classifica ottieniClassifica(){
		try {
			return mioServer.ottieniClassifica();
		} catch (SQLException e) {
			e.printStackTrace();
			return null; 
		}
	}
	
	
	/**
	 * Effettua tutte le operazioni necessarie per inizializzare il giocatore: riporta il giocatore come se fosse nel limbo
	 *TODO: rivedi se poi mettiamo decorator
	 * 
	 */
	private void inizializzaGiocatore(){
		statoLimbo();
		this.miaPartita = null;
		this.coloreGiocatore = null;
		this.numeroArmateDaPosizionare = null;
		this.tuoTurno = false; 
	}
	
	
	/**
	 * Ci mette con lo stato nel Limbo.
	 */
	private void statoLimbo(){
		this.statoAttuale = StatiUtente.LIMBO;
	}
	/**
	 * Ci mette con lo stato  InTavolo.
	 */
	private void statoTavolo(){
		this.statoAttuale = StatiUtente.INTAVOLO;
	}
	/**
	 * Ci mette con lo stato InPartita.
	 */
	private void statoPartita(){
		this.statoAttuale = StatiUtente.INPARTITA;
	}
	
	/**
	 * Ci mette con lo stato NonConnesso.
	 */
	private void statoDisconnesso(){
		this.statoAttuale = StatiUtente.NONCONNESSO;
	}


	/**
	 * Getter per lo stato attuale del giocatore
	 * @return	Lo stato del giocatore.
	 */
	public StatiUtente getStatoAttuale() {
		return statoAttuale;
	}
	
	/**
	 * Getter per le info del giocatore
	 * @return - il Bean contenente le info del giocatore
	 */
	public BeanGiocatore getMieInfo() {
		return mieInfo;
	}

	
	/**
	 * Setter per il Bean rappresentante le info del giocatore
	 * @param mieInfo - il bean rappresentante le info del giocatore
	 */
	public void setMieInfo(BeanGiocatore mieInfo) {
		this.mieInfo = mieInfo;
	}
	
	/**
	 * Aggiorna le infoUtente, e le invia al client corrispondente.
	 * @param mieInfo - il bean rappresentante le info del giocatore
	 */
	public void aggiornaInfoUtente(BeanGiocatore mieInfo){
		setMieInfo(mieInfo);
		this.interfacciaComunicazione.inviaMieInfo(mieInfo);
	}
	
	
	/**
	 * Getter per lo username del giocatore
	 * @return - lo username del giocatore
	 */
	public String getUsername(){
		return this.mieInfo.getNomeUtente();
	}
	
	
	/**
	 * Metodo per disconnettere un giocatore dal gioco (sia per logout che per disconnessione imprevista). 
	 */
	public void disconnetti(){
		//Abbandoniamo un eventuale partita
		abbandonaPartita();
		//Abbandoniamo un eventuale tavolo
		abbandonaTavolo();
		//Ci mettiamo nello stato disconnesso
		statoDisconnesso();
		//Ci disconnettiamo dal server
		mioServer.rimuoviDaConnessi(this);
	}
	
	
	/**
	 * Comando del client di abbandonare la partita (sia volutamente che per disconnessione improvvisa).
	 * Riporta inoltre l'utente nello stato iniziale
	 */
	public void abbandonaPartita(){
		if(this.miaPartita != null){
			try {
				miaPartita.disconnettiUtente(this);
			} catch (SQLException e) {
				//Impossibile disconnettere l'utente
				e.printStackTrace();
			}
		}
		inizializzaGiocatore();
	}
	
	
	/**
	 * Comando del client di abbandonare il tavolo (sia volutamente che per disconnessione improvvisa).
	 * Riporta inoltre l'utente nello stato iniziale
	 */
	public void abbandonaTavolo(){
		if(this.mioTavolo != null){
			mioTavolo.rimuoviGiocatore(this);
		}
		inizializzaGiocatore();
	}
	
	
	/**
	 * Metodo per comunicare al client un cambiamento nel tavolo a cui è seduto.
	 * Non comunica nulla se il giocatore non è seduto a nessun tavolo o se il tavolo di cui ha il riferimento non è cambiato
	 * @param tavolo - il tavolo aggiornato
	 */
	public void cambiamentiTavolo(TavoloAperto tavolo){
		//controllo se lo stato è in tavolo e se effettivamente ci sono stati cambiamenti nel tavolo
		if(statoAttuale == StatiUtente.INTAVOLO && !mioTavolo.equals(tavolo)){
			this.interfacciaComunicazione.comunicaCambiamentiTavolo(tavolo);
		}
	}
	
	
//	/**
//	 *
//	 * Comunica al client corrispondente l'aggiunta di un nuovo utente al tavolo in cui sta
//	 * @param username - username del giocatore che si è appena aggiunto al tavolo
//	 */
//	public void giocatoreAggiuntoATavolo(String username){
//		if(statoAttuale == StatiUtente.INTAVOLO)
//			this.interfacciaComunicazione.giocatoreAggiuntoATavolo(username);
//	}
//	
//	/**
//	 * Comunica al client corrispondente la rimozione di un utente dal tavolo in cui sta
//	 * @param username - l'username dell'utente da rimuovere dal tavolo
//	 */
//	public void giocatoreRimossoDaTavolo(String username){
//		if(statoAttuale == StatiUtente.INTAVOLO)
//			this.interfacciaComunicazione.giocatoreRimossoDaTavolo(username);
//	}
	
	
	/**
	 * Inviamo la lista di tutti i tavoli aperti al client. 
	 * Lo fa solo se è nel Limbo.
	 * @param tavoliAperti	La lista dei tavoli aperti.
	 */
	public void comunicaTavoli(ArrayList<TavoloAperto> tavoliAperti){
		if(this.statoAttuale == StatiUtente.LIMBO){ //Viene comunicato solo agli utenti che si trovano nel limbo.
			this.interfacciaComunicazione.comunicaListaTavoli(tavoliAperti);
		}
//		else if(this.statoAttuale == StatiUtente.INTAVOLO){
//			
//		}
	}
	
	/**
	 * Comando del client di creare un nuovo tavolo (a cui il creatore si aggiungerà)
	 * @return - l'id del tavolo appena creato
	 */
	public Integer creaTavolo(){
		Integer idTavolo;
		//Chiediamo al server di creare il tavolo
		idTavolo = this.mioServer.creaTavolo(this);
		//Ci mettiamo in tavolo
		statoTavolo();
		//Torniamo al client in numero del tavolo creato.
		return idTavolo;
	}
	
	
	/**
	 * 	/**
	 * Metodo che chiede di aggiungersi a un tavolo. 
	 * Se l'aggiunta va a buon fine cambia lo stato attuale in "InTavolo."
	 * @param idtavolo					L'Id del tavolo a cui il giocatore si vuole aggiungere
	 * @return true - se l'aggiunta e' andata a buon fine; false - altrimenti.
	 */
	public boolean joinTavolo(Integer idTavolo){
		boolean esito =  mioServer.joinTavolo(this, idTavolo);
		if(esito == true)
			statoTavolo();
		return esito;
	}
	
	
	/**
	 * Comando del client di avviare il tavolo a cui ha preso parte 
	 * @return true - se il tavolo verrà avviato; false - altrimenti
	 */
	public boolean avviaTavolo(Integer idTavolo){
		if(statoAttuale != StatiUtente.INTAVOLO && idTavolo != mioTavolo.getIdTavolo()){
			return false; //non ero in un tavolo (o non ero nel tavolo richiesto) non posso richiedere di avviare il tavolo
		}
		return this.mioTavolo.avviaTavolo(getUsername());
	}
	
	
	
	
	
	/**
	 * DA QUI IN POI FACCIO I METODI RIGUARDANTI PARTITA
	 * 
	 * 
	 */
	
	/**
	 * Il Server comunica al giocatore che una partita è stata inizializzata
	 * @param miaPartita - riferimento alla partita a cui l'utente ha preso parte
	 * @param infoGiocatoriPartita - le info riguardanti i giocatori della partita a cui l'utente ha preso partr
	 * 
	 */
	//manda le info degli utenti (con cui giocherà) perchè mentre sono in partita non cambieranno mai. 
	public void partitaInizializzata(Partita miaPartita, ArrayList<BeanGiocatore> infoGiocatoriPartita){
		this.mioTavolo = null; 
		this.miaPartita = miaPartita; 
		//cambio lo stato con InPartita
		statoPartita();
		//comunico al client che  la partita inizia
		this.interfacciaComunicazione.iniziaPartita(miaPartita.getIdPartita(), infoGiocatoriPartita);
	}
	
	
	
	
	
	
	
	
	
//	public void setMiaPartita(Partita miaPartita) {
//		this.miaPartita = miaPartita;
//	}
	
	
	
	
	
	
	
	
	
	
	
//	public Partita getMiaPartita() {
//		return miaPartita;
//	}



	



	

	

	

	

	
	

	
	
	
//	
//	public void comunicaDisconnessione(){
//		inizializzaGiocatore();		
//	}
//	


	
	//TODO Quando mai chiederemo al nostro giocatore se è il suo turno? Al massimo è private.
	public boolean isTuoTurno() {
		return tuoTurno;
	}


	//TODO possibile duplicato con comunicaTurno - abbiamo realmente bisogno di una comunicazione speciale per segnalare il nostro turno?
	public void setTuoTurno(boolean tuoTurno) {
		if(this.tuoTurno==false && tuoTurno==true){
			//TODO Notificare al client che è il proprio turno.
		}
		this.tuoTurno = tuoTurno;	
	}
	
	
	public void comunicaTurno(Colori colore, String username){
		//TODO
		//chiama metodo di interfaccia comunicazione che dice che è il turno di questo e di quello
	}

	
	public void fineTurno(){
		this.setTuoTurno(false);
	}
	
	
	public boolean attendiUnaMossa(Integer tempo){
		boolean mossa=this.interfacciaComunicazione.attendiMossa(tempo);
		//chiamo interfaccia comunicazione

		return mossa;
		
	}


	public Integer getNumeroArmateDaPosizionare() {
		return numeroArmateDaPosizionare;
	}

	
	public void setColoreGiocatore(Colori coloreGiocatore) {
		this.coloreGiocatore = coloreGiocatore;
	}
	
	//TODO Da implementare come scritto su carta
	public void comunicaTerritoriPosizionaArmate(Integer timer){
		this.interfacciaComunicazione.comunicaTerritoriPosizioneArmate(this.territoriPosseduti, this.numeroArmateDaPosizionare, timer);		
	}
	
	//to mia partita...
	public void setArmateSuTerritorio(Territorio territorioPos, Integer numeroArmate) throws Exception{
		miaPartita.setArmateSuTerritorio(this, territorioPos, numeroArmate);	
	}
	
	
	
	public void comunicaMappa (Mappa mappa){
		//manda l'intera mappa al client
	}
	
	

	
	
	
	
	
	public Colori scegliColore (ArrayList<Colori> coloriDisponibili, Integer timer){
		
		return this.interfacciaComunicazione.scegliColore(coloriDisponibili); 
	}
	
	public void comunicaListaColori(ArrayList<Colori> ordneColori){
		
	}



	public void setNumeroArmateDaPosizionare(Integer numeroArmateDaPosizionare) {
		this.numeroArmateDaPosizionare = numeroArmateDaPosizionare;
	}

	//a inizio turno dopo posizionamento, annidato a altro
	public void aggiungiArmateSuTerritorio(Territorio territorioPos, Integer numeroArmate) throws Exception{
		miaPartita.setArmateSuTerritorio(this, territorioPos, numeroArmate);
	}


	public Colori getColoreGiocatore() {
		return coloreGiocatore;
	}
	
	
	//COMUNICA LE ARMATE CHE DEVE POSIZIONARE
	public void riceviArmateInizioTurno(Integer numeroArmate, Integer tempo){
		//le manda al server, quando ha fatto il client chiama altri metodi per settare, 
		//poi fatto diventa == true
		this.interfacciaComunicazione.settaggioArmateInizioTurno(numeroArmate, tempo);
		//se il timer scade e non è ancora tornato dovrebbe essere false, invece cosi mi affido alla scadenza del timer nel client
	}
	
	

	public ArrayList<Territorio> getTerritoriPosseduti() {
		return territoriPosseduti;
	}
	
	/**
	 * METODI PER ATTACCO AVVENNUTO
	 */
	public void parteAttacco(Integer numeroUnitaAttaccanti, Territorio territorioAttaccato, Territorio territorioAttaccante){
		try{ 
			miaPartita.attacco(numeroUnitaAttaccanti, territorioAttaccato.getNome(), territorioAttaccante.getNome());
		} catch(Exception e){
			
		}
		//chiama attaccoAvvenuto 
		//chiama attendiDifesa, che fa partire il timer e si aspetta un interrupt se il client preme prima il pulsante
		
		//fatto tutto ciò mi occupo del risultato, lo gestisco localmente e lo comunico a tutti
	}
	
	//attaccoAvvenuto fa partire il TIMERDIFESA NEI CLIENT
	public void attaccoAvvenuto(ArrayList<Integer> risultatoDadiAttacco, Territorio territorioAttaccato, Territorio territorioAttaccante, Integer timer){
		
	}
	
	
	public void attendiDifesa(Territorio territorioAttaccato, Territorio territorioAttaccante, Thread timer){
		//qui parte il timer, NON APPENA SCADE, O RICEVE UN INTERRUPT PERCHE' IL CLIENT SCHIACCIA, SI SBLOCCA O SCADE E CHIAMA DIFESA AVVENUTA
		//chiama difesaAvvenuta
	}
	
	public void difesaAvvenuta(ArrayList<Integer> risultatoDadiAttacco, Territorio territorioAttaccato, Territorio territorioAttaccante){
		
	}


	public void risultatoSessioneAttacco(Integer [] risultati, Territorio territorioAttaccato, Territorio territorioAttaccante, boolean conquistato){
		
	}
	
	
	//comunica ordine
	public void comunicaOrdine (ArrayList<String> nomiGiocatoriInOrdine){
		
	}
	
	public void fineDellaPartita(String nomeVincitore){
		
	}
	
	
	public void effettuaMossa(){
		
	}
	
	
	public void comunicaAttacco(Territorio territorioAttaccante, Territorio territorioAttaccato, Integer numeroUnitaAttaccanti, Integer numeroUnitaDifesa, Integer [] risultati, boolean conquistato){
		
	}
	
	public void nuovoTurno(String vecchioGiocatore, String nuovoGiocatore){
		
	}

	/**
	 * Comunica la sconfitta al client.
	 * Se siamo il giocatore sconfitto, veniamo riportati al limbo.
	 * @param giocatoreSconfitto	Il giocatore sconfitto.
	 */
	public void comunicaSconfitta(String giocatoreSconfitto){
		if(getUsername().equals(giocatoreSconfitto)){
			//Se siamo il giocatore sconfitto torniamo nel limbo
			inizializzaGiocatore();
		}
		//TODO Comunica sconfitta al client
	}
	

	
	
	


	


	
	
	
	
}
