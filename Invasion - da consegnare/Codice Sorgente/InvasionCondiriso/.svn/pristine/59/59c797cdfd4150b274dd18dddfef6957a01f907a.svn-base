package mappa;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Iterator;

import exceptionCondivise.TerritorioNonTrovatoException;
/**
 * Rappresenta la mappa di gioco
 * @author timmy
 *
 */
public class Mappa {
	
	private ArrayList<Continente> listaContinenti = null;
	private ArrayList<Territorio> listaTerritori = null;
	
	//TODO Creare costruttore che tira giù le info dal DB
	/**
	 * Costruttore mappa
	 * Definisce anche i confini dei territori
	 * Assegna anche i bonus ai vari continenti
	 */
//	public Mappa(){
//		this.listaContinenti = new ArrayList<Continente>(continenti.length);
//		this.listaTerritori = new ArrayList<Territorio>(territori.length);
//		//Ciclo che crea tutti i continenti e i territori
//		for(int i = 0; i<continenti.length; i++){
//			listaContinenti.add(new Continente(continenti[i], bonus[i]));
//			for(int j = 0; j<territori[i].length; j++){
//				//Creiamo lo stato dandogli nome e password
//				Territorio territorioTemporaneo = new Territorio(territori[i][j], continenti[i]);
//				listaTerritori.add(territorioTemporaneo);
//			}
//		}
//		//Ciclo che definisce tutti i confini
//		Territorio territorioTemporaneo = null;
//		for(int i = 0; i<continenti.length; i++){	//Sfogliamo tutti i continenti
//			for(int j = 0; j<territori[i].length; j++){	//Sfogliamo tutti gli stati
//				for(int k=0; k<confina[i].length; k++){
//					territorioTemporaneo = trovaTerritorio(territori[i][j]);
//					listaContinenti.get(i).getTerritori().get(j).getTerritoriConfinanti().add(territorioTemporaneo);
//				}
//			}
//		}	
//	}
	
	public Mappa(String[] continenti, Integer[] bonus, String[][] territori, String[][] confina){
		this.listaContinenti = new ArrayList<Continente>(continenti.length);
		this.listaTerritori = new ArrayList<Territorio>(territori.length);
		//Ciclo che crea tutti i continenti e i territori
		for(int i = 0; i<continenti.length; i++){
			listaContinenti.add(new Continente(continenti[i], bonus[i]));
			for(int j = 0; j<territori[i].length; j++){
				//Creiamo lo stato dandogli nome e password
				if(territori[i][j] == null)
					break;
				else{
					Territorio territorioTemporaneo = new Territorio(territori[i][j], continenti[i]);
					listaTerritori.add(territorioTemporaneo);
				}
			}
		}
		//Ciclo che definisce tutti i confini
		Territorio territorioTemporaneo = null;
		for(int i = 0; i<continenti.length; i++){	//Sfogliamo tutti i continenti
			for(int j = 0; j<territori[i].length; j++){	//Sfogliamo tutti gli stati
				for(int k=0; k<confina[i].length; k++){
					try {
						territorioTemporaneo = trovaTerritorio(territori[i][j]);
					} catch (TerritorioNonTrovatoException e) {System.out.println("Bho, un null...");	}
					listaContinenti.get(i).getTerritori().get(j).getTerritoriConfinanti().add(territorioTemporaneo);
				}
			}
		}	
	}
	
	/**
	 * Cerca il territorio con il nome passato come parametro
	 * @param nome Il nome del territorio ricercato.
	 * @return il territorio che è stato trovato - null se non viene trovato 
	 * @throws TerritorioNonTrovatoException 
	 */
	public Territorio trovaTerritorio(String nome) throws TerritorioNonTrovatoException{
		Territorio territorioTrovato = null;
		Iterator<Continente> itContinente = this.listaContinenti.iterator();
		while(itContinente.hasNext()){
			territorioTrovato = itContinente.next().trovaTerritorio(nome);
			if(territorioTrovato != null)	//Se non è null il risultato della ricerca ci torna il valore trovato
				System.out.println("Ho trovato: "+territorioTrovato);
				return territorioTrovato;
		}
	//TODO: Lanciare un errore se non viene trovato il territorio
	throw new TerritorioNonTrovatoException();
	}

	/**
	 * La lista dei territori presenti nella mappa
	 * @return I territori presenti nella mappa. (Ogni modifica è permanente)
	 */
	public ArrayList<Territorio> getListaTerritori() {
		return this.listaTerritori;
	}
	
	/**
	 * Ci da una copia dei continenti (I continenti, una volta inizializzati sono immutabili)
	 * @return La copia dei continenti presenti in mappa (Ogni modifica è solo locale)
	 */
	public ArrayList<Continente> getListaContinenti() {
		return (ArrayList<Continente>) this.listaContinenti.clone();
	}
	
	
	/**
	public ArrayList<Territorio> ClonaListaTerritori() {
		return (ArrayList<Territorio>) (this.listaTerritori.clone());
	}	
	*/
	
	
	
}
