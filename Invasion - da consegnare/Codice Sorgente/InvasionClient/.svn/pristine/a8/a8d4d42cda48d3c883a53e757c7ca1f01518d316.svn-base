package socket;

import java.net.Socket;
import java.util.ArrayList;

import socketcondiviso.AlfabetoSocket;
import comunicazione.Client2Server;
import classiCondivise.BeanGiocatore;
import classiCondivise.BeanTavolo;
import classiCondivise.Classifica;
import classiCondivise.Colori;
import classiCondivise.CreareMessaggio;
import client.Ambasciatore;

//TODO Implementerà l'interfaccia di comunicazione client2server
public class InterpreteClient implements Client2Server {

	
	private Ambasciatore ambasciatore;
	private String stringaLetta;
	private LettoreClient lettoreSocket;
	private Thread threadLettore;
	
	
	/**
	 * Avvia il lettore assandogli il socket da cui leggere
	 * @param mioSocket
	 */
	public InterpreteClient(Socket mioSocket){
		super();
		this.ambasciatore = Ambasciatore.getInstance();
		this.lettoreSocket = new LettoreClient(this, mioSocket);
		this.threadLettore = new Thread(lettoreSocket);
		threadLettore.start();
		this.ambasciatore.setInterfacciaComunicazione(this);
	}
	
	/**
	 * Controlla se il lettore è vivo.
	 * @return	Lo stato del lettore.
	 */
	public boolean isAlive() {
		//Controlla che il lettore sia ancora vivo
		if(threadLettore == null){	//Lettore inesistente
			return false;
		}
		else if(! threadLettore.isAlive()){	//Lettore morto
			return false;
		}
		return true;
	}
	
	/**
	 * Manda un interrupt al  lettore per terminarlo.
	 */
	public void killLettore() {
		this.threadLettore.interrupt();
	}
	
	/**
	 * Interpreta la stringa letta e ritorna la stringa di risposta.
	 * @param stringaLetta	La stringa letta dal socket.
	 * @return	La stringa di risposta.
	 */
	public String interpreta(String stringaLetta){
		String comando = CreareMessaggio.estraiComando(stringaLetta).toUpperCase(); //prendo il comando
		String stringaPura = CreareMessaggio.rimuoviComando(stringaLetta);  //prendo la stringa pura
		String stringTemp;
		
		if(comando.toUpperCase().equals(AlfabetoSocket.infoUtenteAggiornate)){
			BeanGiocatore nuovoBean = CreareMessaggio.estraiBeanGiocatore(stringaPura);
			this.ambasciatore.riceviMieInfo(nuovoBean);
			return CreareMessaggio.responsoPositivo(AlfabetoSocket.stringaVoid);	
		}
		else if (comando.toUpperCase().equals(AlfabetoSocket.cambiamentiTavolo)){
			ArrayList<String> nomiGiocatoriTavolo = CreareMessaggio.estraiArrayListStringhe(stringaPura);
			this.ambasciatore.cambiamentiTavolo(nomiGiocatoriTavolo);
			return CreareMessaggio.responsoPositivo(AlfabetoSocket.stringaVoid); 
			//devo estrarre un arraylist di stringhe
			
		}
		else if(comando.toUpperCase().equals(AlfabetoSocket.listaTavoliAggiornati)){
			ArrayList<BeanTavolo> nuovaListaTavoli = CreareMessaggio.estraiArrayListBeanTavolo(stringaPura);
			this.ambasciatore.riceviInfoTavoli(nuovaListaTavoli);
			return CreareMessaggio.responsoPositivo(AlfabetoSocket.stringaVoid);
		}
		
		System.err.println("Comando provenienza server non riconosciuto: ["+comando+"]");
		return null;
	}
	
	public synchronized String inviaComando(Integer secondiAttesa) throws InterruptedException{
		//TODO gestire l'invio del comando
		
		//Attendiamo la risposta dell'utente
		if(stringaLetta.equals(AlfabetoSocket.customString)){
			wait(secondiAttesa*1000);
		}
		//Ci salviamo la risposta, ripristiniamo la stringa di default e ritorniamo quello che abbiamo letto
		String risposta = stringaLetta;
		this.stringaLetta = AlfabetoSocket.customString;
		return risposta;
	}
	
	public synchronized String inviaComando(String stringaDaInviare) throws InterruptedException{
		String risposta = this.lettoreSocket.inviaComando(stringaDaInviare);
		this.stringaLetta = AlfabetoSocket.customString;
		return risposta;
	}
	
	public String getStringaLetta() {
		return stringaLetta;
	}

	public void setStringaLetta(String stringaLetta) {
		this.stringaLetta = stringaLetta;
	}

	@Override
	public BeanGiocatore effettuaLogin(String username, String password) {
		String stringaDaInviare = AlfabetoSocket.login+AlfabetoSocket.at+username+AlfabetoSocket.dotcomma+password;
		String risposta = null;
		BeanGiocatore bean = null;
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			bean = CreareMessaggio.estraiBeanGiocatore(risposta);
			System.out.println(bean.toString());
			return bean;
		}
		else{
			System.out.println("Credenziali errate");
			return null;
		}
	}

	@Override
	public BeanGiocatore effettuaRegistrazione(String username, String password) {
		String stringaDaInviare = AlfabetoSocket.registra+AlfabetoSocket.at+username+AlfabetoSocket.dotcomma+password;
		String risposta = null;
		BeanGiocatore bean = null;
		try {
			System.out.println("Invio la richiesta di registrazione");
			risposta = inviaComando(stringaDaInviare);
			System.out.println("Risposta: "+risposta);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith("OK")){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			bean = CreareMessaggio.estraiBeanGiocatore(risposta);
			System.out.println(bean.toString());
			return bean;
		}
		else{
			System.out.println("Credenziali errate");
			return null;
		}
	}

	@Override
	public Classifica chiediClassifica() {
		String stringaDaInviare = AlfabetoSocket.classifica;
		String risposta = null;
		Classifica classifica;
		try {
			risposta = inviaComando(stringaDaInviare);
			System.out.println("Risposta: "+risposta);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith("OK")){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			classifica = CreareMessaggio.estraiClassifica(risposta);
			return classifica;
		}
		else{
			//Non dovrebbero arrivare stringhe diverse
			return null;
		}
	}
	@Override
	public boolean cambiaPassword(String vecchiaPassword, String nuovaPassword) {
		String stringaDaInviare = AlfabetoSocket.cambioPsw+AlfabetoSocket.at+vecchiaPassword+AlfabetoSocket.dotcomma+nuovaPassword;
		String risposta = null;
		Boolean esito; 
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return false;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			esito = CreareMessaggio.estraiBoolean(risposta);
			return esito;
		}
		return false;
	}

	@Override
	public BeanGiocatore ottieniInfoUtente(String usernameUtente) {
		String stringaDaInviare = AlfabetoSocket.ottieniInfoUtente+AlfabetoSocket.at+usernameUtente;
		System.out.println(stringaDaInviare);
		String risposta = null;
		BeanGiocatore beanGiocatoreRichiesto;
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			beanGiocatoreRichiesto = CreareMessaggio.estraiBeanGiocatore(risposta);
			return beanGiocatoreRichiesto;
		}
		return null; 
	}

	@Override
	public ArrayList<BeanTavolo> richiediListaTavoliAperti() {
		String stringaDaInviare = AlfabetoSocket.aggiornaTavoli;
		String risposta = null;
		ArrayList<BeanTavolo> tavoli;
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			tavoli = CreareMessaggio.estraiArrayListBeanTavolo(risposta);
			System.out.println(risposta);
			return tavoli;
		}
		else{
			//TODO non dovrebbe mai dare esito negativo
			return null;
		}
	}

	@Override
	public Integer creaTavolo() {
		String stringaDaInviare = AlfabetoSocket.creaTavolo;
		String risposta = null;
		Integer idTavolo; 
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			idTavolo = Integer.parseInt(risposta);
			return idTavolo; //id del tavolo creato
		}
		else{
			return null;
		}
	}

	@Override
	public ArrayList<String> joinTavolo(Integer idTavolo) {
		String stringaDaInviare = AlfabetoSocket.joinTavolo+AlfabetoSocket.at+(idTavolo.toString());
		String risposta = null;
		ArrayList<String> nomiGiocatori; 
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return null;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			nomiGiocatori = CreareMessaggio.estraiArrayListStringhe(risposta);
			return nomiGiocatori;
		}
		else{
			return null;
		}
	}

	@Override
	public void abbandonaTavolo() {
		String stringaDaInviare = AlfabetoSocket.abbandonaTavolo;
		String risposta = null;
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso"); //TODO dovremmo mandare un'eccezione
			return; 
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			return;
		}
	}

	@Override
	public boolean avviaTavolo(Integer idTavolo) {
		String id = idTavolo.toString();
		String stringaDaInviare = AlfabetoSocket.startTavolo+AlfabetoSocket.at+id;
		String risposta = null;
		boolean avvio;
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return false;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			avvio = Boolean.parseBoolean(risposta);
			return avvio;
		} else
			return false;
	}

	@Override
	public boolean effettuaLogout() {
		String stringaDaInviare = AlfabetoSocket.logout + AlfabetoSocket.at;
		String risposta = null; 
		boolean esitoLogout; 
		try {
			risposta = inviaComando(stringaDaInviare);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(risposta == null){
			System.out.println("Disconnesso");
			return false;
		}
		else if (risposta.startsWith(AlfabetoSocket.esitoPositivo)){
			risposta = CreareMessaggio.rimuoviComando(risposta);
			esitoLogout = Boolean.parseBoolean(risposta);
			return esitoLogout;
		} else
			return false;
	}

	@Override
	public void sceltaColoreEffettuata(Colori colore) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void sceltaArmateInizialeEffettuata(String comandoPosizionamento) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void passaTurno() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void comandoSpostaArmate(Integer numeroArmateDaSpostare,
			String origine, String destinazione) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void comandoAttacco(Integer numeroUnitaAttaccanti,
			String tAttaccato, String tAttaccante) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void abbandonaPartita() {
		// TODO Auto-generated method stub
		
	}

}
