package client;

import java.sql.SQLException;
import java.util.ArrayList;

import mappa.Mappa;
import mappa.Territorio;
import comunicazione.Client2Server;
import classiCondivise.BeanGiocatore;
import classiCondivise.BeanTavolo;
import classiCondivise.Classifica;
import classiCondivise.Colori;
import classiCondivise.StatiUtente;
import exceptionCondivise.GiocatoreNonTrovatoException;
import exceptionCondivise.ProblemaAvvioTavoloException;
import exceptionCondivise.TavoloInesistenteException;
import exceptionCondivise.TerritorioNonTrovatoException;
import exceptionCondivise.UnitaInsufficientiException;
import guiClient.CreaPopup;

/**
 * Classe che si occupa del dialogo tra la logica del client e le classi di comunicazione (che hanno visibilità di interfaccia)
 *
 */
public class Ambasciatore {
	
	/**
	 * Istanza del Server. 
	 * Se è null creo una nuova istanza 
	 */
	private static Ambasciatore INSTANCE = null; 
	
	/**
	 * Stato attuale dell'utente
	 */
	private StatiUtente statoAttuale;
	
	/**
	 * Bean del giocatore contente le info relative all'utente.
	 */
	private BeanGiocatore mieInfo;
	
	/**
	 * Riferimento alla classe di comunicazione con visibilità di interfaccia
	 */
	private Client2Server interfacciaComunicazione;
	
	private Limbo limbo = null; 
	private Tavolo tavolo = null;
	private Partita miaPartita = null;
	

	/**
	 * Costruttore privato della classe Ambasciatore. 
	 */
	private Ambasciatore() {
		this.statoAttuale = StatiUtente.NONCONNESSO;
	}
	
	
	/**
	 * Metodo per crea un'istanza della classe Server, se essa ancora non esiste.
	 */
	private synchronized static void createInstance() {
		if(INSTANCE == null)
			INSTANCE = new Ambasciatore();
	}
	
	/**
	 * Metodo per ottenere un riferimento alla classe Server
	 * @return l'unica istanza della classe Server
	 */
	public static Ambasciatore getInstance(){
		if(INSTANCE == null)
			createInstance();
		return INSTANCE; 
	}
	
	/**
	 * Metodo per settare l'interfaccia di comunicazione che il client utilizzerà per la comunicazione con il server.
	 * @param comunicazione - il riferimento all'interfaccia di comunicazione 
	 */
	public void setInterfacciaComunicazione(Client2Server comunicazione){
		this.interfacciaComunicazione = comunicazione;
	}
	

	/**
	 * Setta il riferimento a una classe Limbo, e setta lo stato del giocatore a Limbo. 
	 * Cancella quindi un eventuale riferimento a tavolo e partita.
	 * @param limbo - riferimento all'oggetto Limbo. 
	 */
	public void setLimbo(Limbo limbo) {
		this.limbo = limbo;
		statoLimbo();
		this.tavolo = null; 
		this.miaPartita = null; 
	}



	/**
	 * Setta il riferimento a una classe Tavolo, in cui l'utente è connesso, e setta lo stato del giocatore a Limbo. 
	 * Cancella quindi un eventuale riferimento a limbo e partita.
	 * @param tavolo - riferimento all'oggetto Tavolo.
	 */
	public void setTavolo(Tavolo tavolo) {
		this.tavolo = tavolo;
		statoTavolo();
		this.limbo = null; 
		this.miaPartita = null; 
	}




	/**
	 * Setta il riferimento a una classe Tavolo, in cui l'utente è connesso, e setta lo stato del giocatore a Limbo. 
	 * Cancella quindi un eventuale riferimento a tavolo e limbo.
	 * @param miaPartita - riferimento all'oggetto Partita
	 */
	public void setMiaPartita(Partita miaPartita) {
		this.miaPartita = miaPartita;
		statoPartita();
		this.limbo = null; 
		this.tavolo = null; 
		
	}


	/**
	 * Metodo per richiedere il login dell'utente
	 * @param username - username inserito dall'utente
	 * @param password - password inserita dall'utente
	 * @return	true - se il login è andato a buon fine; false - altrimenti.
	 * @throws SQLException 
	 */
	public boolean login(String username, String password) throws SQLException{
		BeanGiocatore bean = interfacciaComunicazione.effettuaLogin(username, password);
		this.mieInfo = bean;
		if(this.mieInfo == null){
			System.out.println("Credenziali errate");
			return false;
		}
		else{
			System.out.println("Login OK");
			statoLimbo();
			return true;
		}
	}

	
	/**
	 * Registrazione dell'utente.
	 * @param username
	 * @param password
	 * Se la registrazione è andata a buon fine, al termine dell'operazione l'utente sarà loggato.
	 * @return true - se la registrazione è andata a buon fine; false - altrimenti
	 */
	public boolean registrazione(String username, String password){
		BeanGiocatore bean = this.interfacciaComunicazione.effettuaRegistrazione(username, password);
		this.mieInfo = bean;
		if(this.mieInfo == null){
			System.out.println("Registrazione Fallita");
			return false;
		}
		else{
			System.out.println("Bean arrivato al Ambasciatore: "+bean.toString());
			statoLimbo();
			return true;
		}
	}
	
	/**
	 * Da Client a Server
	 * Metodo per cambiare la password
	 * @param vecchiaPassword - la vecchia password
	 * @param nuovaPassword - la nuova password
	 * @return true - se il cambio di password è andato a buon fine; false - altrimenti
	 */
	public boolean cambiaPassword(String vecchiaPassword, String nuovaPassword){
		return this.interfacciaComunicazione.cambiaPassword(vecchiaPassword, nuovaPassword);
	}
	
	
	/**
	 * Metodo per richiedere la lista dei Tavoli Aperti
	 * @return - la lista con le info dei tavoli aperti (id e numero giocatori)
	 * 
	 */
	public ArrayList<BeanTavolo> richiediListaTavoliAperti(){
		ArrayList<BeanTavolo> infoTavoli = this.interfacciaComunicazione.richiediListaTavoliAperti();
		return infoTavoli;
	}
	
	/**
	 * Da Client a Server.
	 * Metodo per ottenere le informazioni riguardanti un utente specifico
	 * @param nomeUtente - il nome dell'utente di cui se vogliono le info
	 * @return le info riguardanti l'utente richiesto
	 * @throws GiocatoreNonTrovatoException 
	 */
	public BeanGiocatore ottieniInfoUtente (String nomeUtente) throws GiocatoreNonTrovatoException{
		return this.interfacciaComunicazione.ottieniInfoUtente(nomeUtente);
	}
	
	
	/**
	 * Da Client a Server
	 * Metodo per ottenere la classifica generale del gioco su richiesta del client
	 * @return la classifica generale
	 */
	public Classifica ottieniClassifica(){
		Classifica classificaAttuale = this.interfacciaComunicazione.chiediClassifica();
		return classificaAttuale;
	}
	
	/**
	 * L'utente riceve il bean con le proprie info
	 * @param mieInfo - Bean con le info da inviare al Client.
	 * 
	 */
	public void riceviMieInfo(BeanGiocatore mieInfo){
		this.aggiornaMieInfo(mieInfo);
		
	}
	
	/**
	 * L'utente riceve la lista aggiornata dei nomi dei giocatori con cui è attualmente seduto a un tavolo.
	 * @param nomiGiocatoriSeduti - la lista dei nomi dei giocatori attualmente seduti al tavolo con l'utente
	 * 
	 */
	public void cambiamentiTavolo(ArrayList<String> nomiGiocatoriSeduti){
		this.tavolo.aggiornaListaGiocatoriEView(nomiGiocatoriSeduti);
	}
	
	/**
	 * Metodo per ricevere le info riguardanti i tavoli aperti
	 * @param infoTavoliAperti - lista di BeanTavoli contenenti le informazioni sui tavoli attualmente aperti (id e numero giocatori attualmente seduti)
	 * 
	 */
	public void riceviInfoTavoli(ArrayList<BeanTavolo> infoTavoliAperti){
		this.limbo.riceviInfoTavoli(infoTavoliAperti);
	}
	
	
	/**
	 * Metodo per aggiornare le info dell'utente
	 * @param mieInfo - le info dell'utente (BeanGiocatore).
	 */
	public void aggiornaMieInfo(BeanGiocatore mieInfo){
		this.mieInfo = mieInfo;
	}
	
	/**
	 * Getter per le info dell'utente corrispondente al Client.
	 * @return - le info dell'utente (BeanGiocatore).
	 */
	public BeanGiocatore getMieInfo(){
		return this.mieInfo;
	}
	
	/**
	 * 
	 * @return clone dell'oggetto contenente le info del giocatore
	 * @see BeanGiocatore
	 */
	public BeanGiocatore ottieniMieInfo(){
		BeanGiocatore mieInfoClone = this.mieInfo.clone();
		return mieInfoClone;
	}
	
	
	
	/**
	 * Il giocatore richiede di creare un nuovo tavolo (a cui il creatore si aggiungerà)
	 * @return il riferimento al Tavolo creato
	 * 
	 */
	public Tavolo creaTavolo() {
		Integer idTavoloCreato = this.interfacciaComunicazione.creaTavolo();
		if(idTavoloCreato != null){
			this.tavolo = new Tavolo(idTavoloCreato); 
			String mioNome = getMieInfo().getNomeUtente();
			try {
				this.tavolo.joinTavolo(mioNome);
			} catch (Exception e) {
				return null;
			}
			statoTavolo();
		}
		return this.tavolo;
	}
	
	
	/**
	 * Il giocatore richiede di aggiungersi a un tavolo 
	 * Se l'aggiunta va a buon fine cambia lo stato attuale in "InTavolo."
	 * @param idtavolo					L'Id del tavolo a cui il giocatore si vuole aggiungere
	 * @return il Tavolo creato con all'interno i giocatori attualmente seduti a quel tavolo; null se non ci si è potuti aggiungere a quel tavolo
	 * @throws TavoloInesistenteException 
	*/
	public Tavolo joinTavolo(Integer idTavolo) throws TavoloInesistenteException{
		ArrayList<String> nomiGiocatoriInTavolo = this.interfacciaComunicazione.joinTavolo(idTavolo);
		if(nomiGiocatoriInTavolo != null){
			this.tavolo = new Tavolo(idTavolo);
			//this.tavolo.setIoCreatore(false);
			this.tavolo.aggiornaListaGiocatori(nomiGiocatoriInTavolo);
			statoTavolo();
			return this.tavolo;
		}
		else return null;  
	}
	
	/**
	 * Comunica all'interfaccia di comunicazione di abbandonare un tavolo.
	 * Setta inoltre lo stato a Limbo.
	 */
	public void abbandonaTavolo(){
		this.interfacciaComunicazione.abbandonaTavolo(); 
		statoLimbo();
	}
	
	
	/**
	 * Ci mette con lo stato nel Limbo.
	 */
	private void statoLimbo(){
		this.tavolo = null;
		this.miaPartita = null;
		this.statoAttuale = StatiUtente.LIMBO;
	}
	/**
	 * Ci mette con lo stato  InTavolo.
	 */
	private void statoTavolo(){
		this.limbo = null;
		this.miaPartita = null;
		this.statoAttuale = StatiUtente.INTAVOLO;
	}
	/**
	 * Ci mette con lo stato InPartita.
	 */
	private void statoPartita(){
		this.limbo = null;
		this.tavolo = null; 
		this.statoAttuale = StatiUtente.INPARTITA;
	}
	
	/**
	 * Ci mette con lo stato NonConnesso.
	 */
	private void statoDisconnesso(){
		this.limbo = null;
		this.tavolo = null; 
		this.miaPartita = null;
		this.statoAttuale = StatiUtente.NONCONNESSO;
	}


	/**
	 * Getter per lo stato attuale del giocatore
	 * @return	Lo stato del giocatore.
	 */
	public StatiUtente getStatoAttuale() {
		return statoAttuale;
	}
	
	
	/**
	 * Metodo per la disconnessione sia volontaria che involantaria del client
	 * Chiamerà il metodo disconnetti() in GiocatoreConnesso() che permette di disconnettere il giocatore dal gioco, con le relative conseguenze.
	 */
	public boolean eseguiLogout(){
		//Comunichiamo al server di volerci disconnettere
		boolean esitoLogout = this.interfacciaComunicazione.effettuaLogout();
		if(esitoLogout){
			//Cio mettiamo nello stato di disconnessi
			this.statoAttuale = StatiUtente.NONCONNESSO;
			System.exit(0);
		}
		
		return esitoLogout;
	}
	

	
	/**
	 * Comando del client di avviare un tavolo, ovvero di cominciare una partita.
	 * @param idTavolo						id del tavolo a cui ci vuole aggiungere
	 * @return								true - se il tavolo è avviato; false - altrimenti
	 * @throws ProblemaAvvioTavoloException  c'è stato un problema nell'avvio del tavolo.
	 */
	public boolean avviaTavolo(Integer idTavolo) throws ProblemaAvvioTavoloException{
		//filtro
		if(statoAttuale != StatiUtente.INTAVOLO){
			return false; 
		}
		if(! this.tavolo.getIdTavolo().equals(idTavolo)){
			return false; 
		}

		boolean esito = this.interfacciaComunicazione.avviaTavolo(idTavolo);
		return esito; 
	}
	 
	
	//METODI RIGUARDANTI PARTITA: 
	
	/**
	 * Comando da server di avviare il tavolo in cui sei 
	 */
	public void avviaPartita(){
		this.tavolo.startPartita();
		statoPartita();
	}
	
	/**
	 * Il server dice al client di scegliere 
	 * @param timer
	 * @param coloriDisponibili
	 * @return
	 */
	public void scegliColorePartita(Integer timer, ArrayList<Colori> coloriDisponibili){
		this.miaPartita.scegliColore(timer, coloriDisponibili);
	}
	
	/**
	 * Comunicazione al server della scelta del colore effettuata.
	 * @param colore - il colore scelto
	 */
	public void sceltaColoreEffettuata(Colori colore){
		this.interfacciaComunicazione.sceltaColoreEffettuata(colore);
	}
	
	/**
	 * Ricezione dell'ordine di gioco di una partita con i colori dei giocatori
	 * @param listaInfoGiocatori - lista info giocatoriPartita
	 * @param ordineColori		 - lista dei colori dei giocatori (in ordine)
	 */
	public void riceviOrdinePartita(ArrayList<BeanGiocatore>listaInfoGiocatori, ArrayList<Colori>ordineColori){
		this.miaPartita.riceviOrdinePartita(listaInfoGiocatori, ordineColori);
	}
	
	/** 
	 * Ricezione della mappa aggiornata
	 * @param mappa - la mappa aggiornata
	 */
	public void riceviMappa(Mappa mappa){
		this.miaPartita.riceviMappa(mappa);
	}
	
	/**
	 * 
	 * Ricezione del numero armate da posizionare e della mappa aggiornata
	 * @param numeroArmateDaPosizionare 	il numero di armate da posizionare
	 * @param timer							il tempo a disposizione del giocatore di posizionare le armate
	 * @param mappaPartita 					la mappa aggiornata
	 * 
	 */
	public void riceviTerritoriPosizionaArmate(Integer numeroArmateDaPosizionare, Integer tempoPosizionaArmate, Mappa mappaPartita){
		this.miaPartita.riceviTerritoriPosizionaArmate(numeroArmateDaPosizionare, tempoPosizionaArmate, mappaPartita);
	}
	
	/**
	 * Comando del giocatore di posizionamento delle armate. Inoltrato all'interfaccia di comunicazione con il server.
	 * @param comandoPosizionamento - Comando del giocatore di posizionamento delle armate
	 */
	public void sceltaArmateInizialeEffettuata(String comandoPosizionamento){
		this.interfacciaComunicazione.sceltaArmateInizialeEffettuata(comandoPosizionamento);
	}

	/**
	 * Ricezione della comunicazione di un nuovo turno all'interno della partita
	 * @param colore	colore del giocatore di cui è il turno
	 * @param username	username del giocatore di cui è il turno
	 */
	public void riceviComunicazioneNuovoTurno(Colori colore, String username){
		this.miaPartita.riceviComunicazioneNuovoTurno(colore, username);
	}

	
	/**
	 * 
	 * @param numeroArmate - numero armate da posizionare
	 * @param tempo		   - tempo a disposizione per posizionare le armate
	 */
	public void riceviArmateInizioTurno(Integer numeroArmate, Integer tempo){
		this.miaPartita.riceviArmateInizioTurno(numeroArmate, tempo);
	}

	/**
	 * Comunicazione da Server di effettuare una mossa
	 * @param tempo - tempo a disposizione per effettuare una mossa.
	 */
	public void comunicazioneInAttesaMossa(Integer tempo){
		this.miaPartita.comunicazioneInAttesaMossa(tempo);
	}
	
	/**
	 * Comando del client di passare un turno. Inoltrato all'interfaccia di comunicazione
	 */
	public void passaTurno(){
		this.interfacciaComunicazione.passaTurno();
	}
	
	/**
	 * 
	 * Comando del client di spostare le armate. 
	 * @param numeroArmateDaSpostare			numero di armate che il giocatore vuole spostare
	 * @param origine							territorio di origine
	 * @param destinazione						territorio di destinazione
	 * @throws TerritorioNonTrovatoException	se uno dei due territori (origine o destinazione) non è stato trovato
	 */
	public void comandoSpostaArmate(Integer numeroArmateDaSpostare, String origine, String destinazione) throws TerritorioNonTrovatoException{
		this.interfacciaComunicazione.comandoSpostaArmate(numeroArmateDaSpostare, origine, destinazione);
	}
	
	/**
	 * Comando del client di effettuare un attacco. Inoltra la richiesta all'interfaccia di comunicazione
	 * @param numeroUnitaAttaccanti			numero di unità con cui si vuole effetuare l'attacco
	 * @param tAttaccato					territorio che il giocatore vuole attaccare
	 * @param tAttaccante					territorio da dove il giocatore vuole attaccare
	 * @throws UnitaInsufficientiException	non ci sono abbastanza unità per effettuate l'attacco
	 */
	public void comandoAttacco(Integer numeroUnitaAttaccanti, String tAttaccato, String tAttaccante) throws UnitaInsufficientiException{
		this.interfacciaComunicazione.comandoAttacco(numeroUnitaAttaccanti, tAttaccato, tAttaccante);
	}
	
	
	/**
	 * Ricezione della comunicazione di un attacco da server
	 * @param tempoDifesa				il tempo che un giocatore ha per difendersi
	 * @param numeroUnitaAttaccanti		numero delle unità coinvolte nell'attacco
	 * @param territorioAttaccato		territorio attaccato
	 * @param territorioAttaccante		territorio attaccante
	 * @param risultatoDadiAttacco		lista con i risultato dei dadi dell'attacco
	 * @param risultatoDadiDifesa		lista con i risultati dei dadi della difesa
	 * @param risultati					in posizione 0 il numero di armate sconfitte, in posizione 1 il numero di armate perse (dal punto di vista dell'attaccante)
	 * @param conquistato				true se il territorio è stato conquistato, false altrimenti
	 */
	public void riceviComunicazioneAttacco(Integer tempoDifesa, Territorio territorioAttaccante, Territorio territorioAttaccato, 
			ArrayList<Integer> risultatoDadiAttacco, ArrayList<Integer> risultatoDadiDifesa, Integer [] risultati, boolean conquistato){
		this.miaPartita.riceviComunicazioneAttacco(tempoDifesa, territorioAttaccante, territorioAttaccato, risultatoDadiAttacco, risultatoDadiDifesa, risultati, conquistato);	
	}
	
	
	/**
	 * Richiesta di abbandono della partita
	 * Ci setta lo stato a Limbo.
	 */
	public void abbandonaPartita(){
		this.interfacciaComunicazione.abbandonaPartita();
		statoLimbo();
	}
	
	
	/**
	 * Ricezione della comunicazione della sconfitta di un giocatore. Se gli sconfitti siamo noi ci riporta nel Limbo.
	 * @param giocatoreSconfitto  - il nome del giocatore sconfitto
	 */
	public void riceviComunicazioneSconfitta(String giocatoreSconfitto){
		this.miaPartita.riceviComunicazioneSconfitta(giocatoreSconfitto);
		if(giocatoreSconfitto.equals(mieInfo.getNomeUtente())){
			statoLimbo(); 
		}
	}
	
	
	
	/**
	 * Ricezione dal server della comunicazione della ritirata di un giocatore. Viene comunicato alla GUI.
	 * @param giocatoreRitirato - il nome del giocatore ritirato
	 */
	public void riceviComunicazioneRitirata(String giocatoreRitirato){
		this.miaPartita.riceviComunicazioneRitirata(giocatoreRitirato);
		if(giocatoreRitirato.equals(mieInfo.getNomeUtente())){
			statoLimbo();
		}
	}
	
	/**
	 * Ricezione dal server della classifica finale. Setta lo stato a Limbo, in quanto la partita è terminata
	 * @param classificaFinale	classifica finale dei giocatori della partita
	 * @param punteggioPrimo	punteggio del primo giocatore
	 * @param punteggioSecondo	punteggio del secondo giocatore
	 */
	public void riceviClassificaFinale(ArrayList<String> classificaFinale, Integer punteggioPrimo, Integer punteggioSecondo){
		this.miaPartita.riceviClassificaFinale(classificaFinale, punteggioPrimo, punteggioSecondo);
		statoLimbo();
	}
	
	
	/**
	 * Metodo per gestire un errore di comunicazione nel server o la chiusura del server
	 */
	public void chiusuraServer(){
		statoDisconnesso();
		if(this.limbo != null){
			this.limbo.chiusuraServer();
		}
		if(this.tavolo != null){
			this.tavolo.chiusuraServer();
		}
		if(this.miaPartita != null){
			this.miaPartita.chiusuraServer();
		}
	}
	
	
	
	
	

	
	
	
	
	
}