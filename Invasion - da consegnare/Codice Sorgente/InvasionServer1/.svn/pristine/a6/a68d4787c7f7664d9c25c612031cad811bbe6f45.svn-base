package mappa;

import java.util.ArrayList;
import java.util.Iterator;
import classiCondivise.Colori;

public class ContinenteNONUSARE {
	private String nome;
	private Integer bonus; 
	private ArrayList<TerritorioNONUSARE> territori = null;
	
	public ContinenteNONUSARE(String nome, Integer bonus){
		territori = new ArrayList<TerritorioNONUSARE>();
		this.nome = nome;
		this.bonus = bonus; 
	}
	
	protected void aggiungiTerritorio(TerritorioNONUSARE mioTerritorio){
		territori.add(mioTerritorio);
	}
	
	/**
	 * Ricerca il territorio desiderato e lo ritorna se lo trova
	 * @param nome
	 * @return Il territorio se viene trovato, null in caso contrario.
	 */
	public TerritorioNONUSARE trovaTerritorio(String nome){
		Iterator<TerritorioNONUSARE> itTerritori = this.territori.iterator();
		while(itTerritori.hasNext()){
			TerritorioNONUSARE territorioTemp = itTerritori.next();
			if(territorioTemp.siChiama(nome)){
				return territorioTemp;
			}
		}
		return null;
	}
	
	/**
	 * \\TODO: rifare il javadoc
	 * Metodo che controlla se i territori del continente sono interamente posseduti da un giocatore, quindi sono dello stesso colore
	 * @return -true se i territori del continente sono dello stesso colore, cioè appartengono allo stesso giocatore, e quindi il bonus va ritirato 
	 * 		   -false se i territori del continente non sono tutti dello stesso colore
	 */
	public boolean hoBonusContinente(Colori colore){
		Iterator <TerritorioNONUSARE> itTerritori = this.territori.iterator();
		while(itTerritori.hasNext()){
			TerritorioNONUSARE territorioTemp = itTerritori.next();
			if(territorioTemp.isEnemy(colore))
				return false;
		}
		return true;
	}

	/**
	 * Metodo che ritorna il colore di un continente, se il continente è posseduto per intero da qualcuno.
	 * @return - il colore del possessore del continente (se qualche giocatore possiede il continente per intero; 
	 * 		   - null, se il continente non è posseduto da nessuno
	 */
	public Colori coloreBonusContinente(){
		//iteratore dei territori facenti parte del continente
		Iterator <TerritorioNONUSARE> itTerritori = this.territori.iterator();
		Colori coloreTemp1, coloreTemp2; 
		coloreTemp1=itTerritori.next().getColorePossessore();
		//itero su tutti i territori
		while(itTerritori.hasNext()){
			coloreTemp2=itTerritori.next().getColorePossessore();
			//se solo due territori hanno colore diverso, il continenti non ha un unico colore, quindi il metodo può terminare
			if(coloreTemp1!=coloreTemp2)
				return null;
			coloreTemp1=coloreTemp2; 
		}
		return coloreTemp1;
	}
	
	
	
	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public Integer getBonus() {
		return bonus;
	}

	public void setBonus(Integer bonus) {
		this.bonus = bonus;
	}

	public ArrayList<TerritorioNONUSARE> getTerritori() {
		return territori;
	}

	public void setTerritori(ArrayList<TerritorioNONUSARE> territori) {
		this.territori = territori;
	}
	
}
