package provaRmi;

import interfacceRemote.ClientComunicazioneInterfaccia;
import interfacceRemote.ServerComunicazioneInterfaccia;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;

import mappa.Territorio;
import interfacciaComunicazione.*;
import classiCondivise.BeanGiocatore;
import classiCondivise.BeanTavolo;
import classiCondivise.Classifica;
import classiCondivise.Colori;
import server_daler.*;


/**
 * Classe comunicazione RMI lato Server. 
 * 
 *
 */
public class ServerComunicazione extends UnicastRemoteObject implements ServerComunicazioneInterfaccia, Server2Client, Runnable {

	
	private static final long serialVersionUID = 1L;
	
	/**
	 * Riferimento all'interfaccia remota di comunicazione lato client (RMI)
	 */
	private ClientComunicazioneInterfaccia client;
	
	/**
	 * Riferimento alla classe GiocatoreConnesso, necessaria per comunicare con il Server.
	 */
	private GiocatoreConnesso mioGiocatore; 
	
	/**
	 * Riferimento al gestore delle Accept RMI.
	 */
	private AcceptClass serverAcc = null; 
	
	/**
	 * Riferimento al Thread che sta facendo girare l'oggetto ServerComunicazione.
	 */
	private Thread serverThread;
	
	/**
	 * Costruttore 
	 * @param client - Riferimento all'interfaccia remota di comunicazione lato client
	 * @throws RemoteException 
	 */
	public ServerComunicazione (ClientComunicazioneInterfaccia client) throws RemoteException{
		super();
		this.client = client; 
		//this.mioGiocatore = new GiocatoreConnesso(this);
	}
	
	/**
	 * Crea un nuovo giocatore connesso e gli passa il riferimento a se stesso (con visibilità interfaccia).
	 * Crea quindi il canale di comunicazione completo da Server a Client.
	 */
	public void setNuovoGiocatore(){
		GiocatoreConnesso nuovoGiocatore = new GiocatoreConnesso(); 
		this.mioGiocatore = nuovoGiocatore; 
		nuovoGiocatore.assegnaInterfacciaComunicazione(this);
	}
	
	/**
	 * Override del metodo run
	 */
	@Override
	public void run(){
		while(true){
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	
	/**
	 * Da Client a Server
	 * Esegue il login.
	 * @param username	username dell'utente
	 * @param password	password dell'utente
	 * @return il BeanGiocatore con le info dell'utente se il login è andato a buon fine; null altrimenti
	 * @throws RemoteException
	 * @see ServerComunicazioneInterfaccia
	 */
	@Override
	public BeanGiocatore eseguiLogin(String username, String password) throws RemoteException{
		BeanGiocatore bean = this.mioGiocatore.loginUtente(username, password);
		return bean;
	}

	
	/**
	 * Da Client a Server
	 * Esegue la registrazione.
	 * @param username	username dell'utente
	 * @param password	password dell'utente
	 * @return il BeanGiocatore con le info dell'utente se la registrazione è andato a buon fine; null altrimenti
	 * @throws RemoteException
	 * @see ServerComunicazioneInterfaccia
	 */
	@Override
	public BeanGiocatore eseguiRegistrazione(String username, String password) throws RemoteException{
		BeanGiocatore bean = this.mioGiocatore.registrazioneUtente(username, password);
		return bean;
	}

	
	
	/**
	 * Da Server a Client
	 * Invia il bean con le proprie info
	 * @param mieInfo - Bean con le info da inviare al Client.
	 * @see Server2Client
	 */
	@Override
	public void inviaMieInfo(BeanGiocatore mieInfo) {
		// TODO Auto-generated method stub
		
	}


	/**
	 * Da Server a Client
	 * Comunica al client un cambiamento nel tavolo a cui è seduto.
	 * @param tavolo - il tavolo aggiornato da comunicare
	 * @return la lista dei nomi dei giocatori attualmente seduti al tavolo
	 * @see Server2Client
	 */
	@Override
	public void comunicaCambiamentiTavolo(ArrayList<String> nomiGiocatori) {
		return null;
		// TODO Auto-generated method stub
		
	}
	
	
	/**
	 * Da Server a Client
	 * Comunica all'utente connesso (nel limbo) le info riguardanti i tavoli aperti
	 * @param infoTavoliAperti
	 * @see Server2Client
	 */
	@Override
	public void comunicaInfoTavoli(ArrayList<BeanTavolo> infoTavoliAperti){
		
	}

	
	/**
	 * Da Client a Server
	 * Metodo per richiedere la lista dei Tavoli Aperti
	 * @return - la lista con le info dei tavoli aperti (id e numero giocatori)
	 */
	public ArrayList<BeanTavolo> richiediListaTavoliAperti(){
		return this.mioGiocatore.richiediListaTavoliAperti();
	}

	
	/**
	 * Da Client a Server
	 * Comando del client di avviare il tavolo a cui ha preso parte.
	 * @param idTavolo - l'id del tavolo che il client ha richiesto di avviare 
	 * @return true - se il tavolo verrà avviato; false - altrimenti
	 */
	public boolean avviaTavolo(Integer idTavolo){
		return this.mioGiocatore.avviaTavolo(idTavolo);
	}
	
	
	
	

//	@Override
//	public void comunicaListaTavoli(ArrayList<TavoloAperto> tavoliAperti) {
//		// TODO Auto-generated method stub
//		
//	}
	
	
	
	
	


	@Override
	public void iniziaPartita(Integer idPartita,
			ArrayList<BeanGiocatore> infoGiocatoriPartita) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void cambiaTurno(String nomeGiocatore) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void ordinePartita(ArrayList<String> nomiGiocatori) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void inviaColoreGiocatorePartita(String coloreGiocatore) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void inviaBonusTurno(String colore, Integer bonus) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void inviaBonusContinente(String colore, String nomeContinente,
			Integer bonus) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void aggiuntaUnita(String colore, String nomeTerritorio,
			Integer numeroUnitaAggiunte) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void rimossaUnita(String colore, String nomeTerritorio,
			Integer numeroUnitaRimosse) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void assegnaArmateInizioPartita(Integer numeroArmate) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void assegnaArmateTurno(Integer numeroArmate) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public ArrayList<Integer> difenditi(String nomeTerritorioAttaccante,
			ArrayList<Integer> dadiAttaccanti) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public void risultatoCombattimento(Integer numeroArmatePerse,
			Integer numeroArmateDistrutte) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public void risultatoPartita(ArrayList<Integer> punteggiFinali) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public Colori scegliColore(ArrayList<Colori> coloriDisponibili) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public void comunicaTerritoriPosizioneArmate(
			ArrayList<Territorio> territoriPosseduti, Integer numeroArmate,
			Integer timer) {
		// TODO Auto-generated method stub
		
	}



	@Override
	public boolean attendiMossa(Integer timer) {
		// TODO Auto-generated method stub
		return false;
	}



	@Override
	public boolean settaggioArmateInizioTurno(Integer numeroArmate,
			Integer tempo) {
		// TODO Auto-generated method stub
		return false;
	}

}
	
	
//	/**
//	 * DA QUI IN POI BORDELLO
//	 */
//	
//	
//	@Override
//	public void TavoloCreato(String nomeGiocatoreCreatore, String IdTavoloCreato) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void JoinTavolo(String nomeGiocatoreAggiunto, String IdTavolo) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void RimossoTavoloAperto(String IdTavolo) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void PassaTavoloOpenToClosed(String IdTavolo) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void PartiTimerTavoloAperto(String idTavolo, Integer secondi) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void PartiTimerTurnoPartita(String idPartita, Integer secondi) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void tuoTurno() {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void cambiaTurno(String nomeGiocatore) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void ordinePartita(ArrayList<String> nomiGiocatori) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void inviaColoreGiocatorePartita(String coloreGiocatore) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void inviaBonusTurno(String colore, Integer bonus) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void inviaBonusContinente(String colore, String nomeContinente,
//			Integer bonus) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void aggiuntaUnita(String colore, String nomeTerritorio,
//			Integer numeroUnitaAggiunte) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void rimossaUnita(String colore, String nomeTerritorio,
//			Integer numeroUnitaRimosse) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void assegnaArmateInizioPartita(Integer numeroArmate) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void assegnaArmateTurno(Integer numeroArmate) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public ArrayList<Integer> difenditi(String nomeTerritorioAttaccante,
//			ArrayList<Integer> dadiAttaccanti) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//
//	@Override
//	public void risultatoCombattimento(Integer numeroArmatePerse,
//			Integer numeroArmateDistrutte) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public void risultatoPartita(ArrayList<Integer> punteggiFinali) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//	@Override
//	public Colori scegliColore(ArrayList<Colori> coloriDisponibili) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//
//
//	@Override
//	public boolean login(String username, String password) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//
//
//	@Override
//	public boolean registrazione(String username, String password) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//
//
//	@Override
//	public boolean cambiaPassword(String vecchiaPassword, String nuovaPassword) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//
//
//	@Override
//	public BeanGiocatore ottieniInfoUtente(String nomeUtente) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//
//
//	@Override
//	public Classifica ottieniClassifica() {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//
//
//	@Override
//	public void inviaMieInfo(BeanGiocatore mieInfo) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public void disconnetti() {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public boolean joinTavolo(Integer idTavolo) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//
//
//	@Override
//	public void abbandonaTavolo() {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public void comunicaCambiamentiTavolo(TavoloAperto tavolo) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public void comunicaListaTavoli(ArrayList<TavoloAperto> tavoliAperti) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public Integer creaTavolo() {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//
//
//	@Override
//	public boolean avviaTavolo(Integer idTavolo) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//
//
//	@Override
//	public void iniziaPartita(Integer idPartita,
//			ArrayList<BeanGiocatore> infoGiocatoriPartita) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public void abbandonaPartita() {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public void comunicaTerritoriPosizioneArmate(
//			ArrayList<Territorio> territoriPosseduti, Integer numeroArmate,
//			Integer timer) {
//		// TODO Auto-generated method stub
//		
//	}
//
//
//
//	@Override
//	public boolean attendiMossa(Integer timer) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//
//
//	@Override
//	public boolean settaggioArmateInizioTurno(Integer numeroArmate,
//			Integer tempo) {
//		// TODO Auto-generated method stub
//		return false;
//	}
//	
//	
//	
//	
////	public ServerComunicazione(ClientComunicazioneInterfaccia client, String name, String password, AcceptClass serverAcc) throws RemoteException{
////		this.client=client; 
////		this.name=name; 
////		this.password=password; 
////		this.serverAcc=serverAcc; 
////		//creo il ThreadPlayer...\\TODO: mettici i parametri
////		this.mioGiocatore = new GiocatoreConnesso(name, this);
////	}
////	
////
////	public void startThreadPlayer(){
////		//creo istanza di threadPlayer
////		this.serverThread = new Thread(this.threadGiocatore);
////		serverThread.start();
////	}
////	
////	public void rimuovi(){
////		//chiamo metodi nella comunicazione per sloggare
////		
////	}
////	
////	//passo al threadPlayer l'id della partita a cui mi voglio a cui mi voglio aggiungere 
////	public void joinPartita(){
////		
////	}
//
//	
//
//}
