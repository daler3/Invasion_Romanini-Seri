package server;

import java.util.ArrayList;

import mappaNONUSARE.*;
import classiCondivise.BeanGiocatore;
import classiCondivise.Classifica;
import classiCondivise.Colori;

public interface Client2Server {
	
	/**
	 * Riferimento a un oggetto di tipo GiocatoreConnesso a cui è associato il client 
	 * che comunica con il server attraverso l'implementazione di questa interfaccia di comunicazione.
	 */
	GiocatoreConnesso mioGiocatore = null; 
	
	
	/**
	 * Riferimento alla classe Server
	 */
	Server mioServer = null; 
	
	
	
	/**
	 * Da Client a Server 
	 * Login dell'utente
	 * @param username	Nome con cui effettuare il login.
	 * @param password	Password con cui effettuare il login.
	 * @return true - se il login è andato a buon fine; false - altrimenti
	 */
	public boolean login(String username, String password);
	
	/**
	 * Da Client a Server
	 * Registrazione dell'utente.
	 * Se la registrazione è andata a buon fine, al termine dell'operazione l'utente sarà loggato.
	 * @param username	Nome con cui effettuare la registrazione.
	 * @param password	Password con cui effettuare la registrazione.
	 * @return true - se la registrazione è andata a buon fine; false - altrimenti
	 */
	public boolean registrazione(String username, String password);
	
	/**
	 * Da Client a Server
	 * Metodo per cambiare la password
	 * @param vecchiaPassword - la vecchia password
	 * @param nuovaPassword - la nuova password
	 * @return true - se il cambio di password è andato a buon fine; false - altrimenti
	 */
	public boolean cambiaPassword(String vecchiaPassword, String nuovaPassword);
	
	
	/**
	 * Da Client a Server
	 * Metodo per ottenere le informazioni riguardanti un utente specifico
	 * @param nomeUtente - il nome dell'utente di cui se vogliono le info
	 * @return le info riguardanti l'utente richiesto
	 */
	public BeanGiocatore ottieniInfoUtente (String nomeUtente);
	
	
	/**
	 * Da Client a Server
	 * Metodo per ottenere la classifica generale del gioco su richiesta del client
	 * @return la classifica generale
	 */
	public Classifica ottieniClassifica();
	
	
	/**
	 * Da Server a Client
	 * Invia il bean con le proprie info
	 * @param mieInfo - Bean con le info da inviare al Client.
	 */
	public void inviaMieInfo(BeanGiocatore mieInfo);
	
	
	/**
	 * Da Client a Server
	 * Metodo per la disconnessione sia volontaria che involantaria del client
	 * Chiamerà il metodo disconnetti() in GiocatoreConnesso() che permette di disconnettere il giocatore dal gioco, con le relative conseguenze.
	 */
	public void disconnetti();
	
	
	/**
	 * Da Client a Server
	 * Metodo per aggiungersi a un tavolo
	 * @param idTavolo - id del tavolo a cui ci si vuole aggiungere
	 * @return true - se l'aggiunta p andata a buon fine; false - altrimenti.
	 */
	public boolean joinTavolo(Integer idTavolo);
	
	
	/**
	 * Da Client a Server
	 * Metodo per abbandonare un tavolo. 
	 * Chiamerà il metodo abbandonaTavolo() in GiocatoreConnesso.
	 */
	public void abbandonaTavolo();
	
	
	
	/**
	 * Da Server a Client
	 * Comunica al client un cambiamento nel tavolo a cui è seduto.
	 * @param tavolo - il tavolo aggiornato da comunicare
	 */
	public void comunicaCambiamentiTavolo(TavoloAperto tavolo);
	
	
	/**
	 * Da Server a Client. 
	 * Comunica all'utente connesso la lista dei tavoli aperti
	 * @param tavoliAperti - la lista dei tavoli aperti
	 */
	public void comunicaListaTavoli(ArrayList<TavoloAperto> tavoliAperti);
	
	/**
	 * Da Client a Server
	 * Comando di creare un nuovo tavolo, a cui il giocatore creatore si aggiungerà
	 * @return - l'id del Tavolo creato
	 */
	public Integer creaTavolo();
	
	
	/**
	 * Da Client a Server
	 * Comando del client di avviare il tavolo a cui ha preso parte 
	 * @param idTavolo - l'id del tavolo che chiedo di avviare
	 * @return true - se il tavolo verrà avviato; false - altrimenti
	 */
	public boolean avviaTavolo(Integer idTavolo);
	
	
	
	/**
	 * DA QUI IN POI FACCIO I METODI RIGUARDANTI PARTITA
	 * 
	 * 
	 */
	
	/**
	 * Da Server a Client
	 * Comando per dire al client che una partita a cui prenderà parte inizia
	 * @param idPartita - id della partita appena iniziata
	 * @param infoGiocatoriPartita - le info degli utenti che stanno prendendo parte alla partita
	 */
	public void iniziaPartita(Integer idPartita, ArrayList<BeanGiocatore> infoGiocatoriPartita);
	
	
	/**
	 * Da Client a Server
	 * Metodo per abbandonare la partita. 
	 * Chiamerà il metodo abbandonaPartita() in GiocatoreConnesso.
	 */
	public void abbandonaPartita();
	
	
	
	
	
	
	
	
	
	
	
	
	//quando viene creato un tavolo
	public void TavoloCreato (String nomeGiocatoreCreatore, String IdTavoloCreato);
	
	//manda il giocatore che si è aggiunto al tavolo del client
	public void JoinTavolo (String nomeGiocatoreAggiunto, String IdTavolo);
	
	//da RimuoviTavoloAperto
	public void RimossoTavoloAperto(String IdTavolo); 
	
	//questo metodo farà sì che si inizializzi la partita con la mappa compresa. 
	//dico questo perché l'idea è che la mappa in sè sia condivisa tra client e server
	public void PassaTavoloOpenToClosed (String IdTavolo);
	
	/**
	 * Se gli facciamo cambiare lo username magari glielo facciamo cambiare solo nel limbo
	 * in modo che gli altri giocatori non vedano un cambio di username di altri mentre sono in partita
	 * o a un tavoloaperto
	 * public void usernameUtenteCambiato (String vecchioUsername, String nuovoUsername); 
	 */
	
	/**
	 * Metodi che mandano le statistiche server2client
	 */
	
	public void PartiTimerTavoloAperto(String idTavolo, Integer secondi);
	
	//magari non passerei nemmeno l'id della partita
	public void PartiTimerTurnoPartita(String idPartita, Integer secondi);
	//se ci sono altri timer direi di fare un metodo per ogni timer
	
	//metodo per dire al client che è il suo turno in quella partita. Quindi il client sa quello che deve fare
	public void tuoTurno ();
	
	//metodo per dire al client che quel giocatore (non lui) ha finito il suo turno
	public void cambiaTurno(String nomeGiocatore); 
	
	public void ordinePartita(ArrayList<String> nomiGiocatori);
	
	//passa i colori secondo l'ordine. Il primo elemento sarà il colore del primo giocatore
	//potremmo fare anche una classe "colori" (enum) con relativi metodi (sempre che non esista già)
	//in modo da passare direttamente i colori così il client sa di che colore colorare i suoi 
	//avatar degli utenti. L'alternativa (appena sotto non commentata) che man mano che 
	/**
	 * 	passa i colori secondo l'ordine. Il primo elemento sarà il colore del primo giocatore
	 *potremmo fare anche una classe "colori" (enum) con relativi metodi (sempre che non esista già)
	 *in modo da passare direttamente i colori così il client sa di che colore colorare i suoi 
     *avatar degli utenti. L'alternativa (appena sotto non commentata) che man mano che 
     *un giocatore sceglie glielo si manda. Quest'ultima soluzione mi sembra migliore
	 * @param coloriGiocatori
	 */
	//public void coloriGiocatoriPartita(ArrayList <String> coloriGiocatori);
	
	/**
	 * Alternativa migliore al metodo inviaColoreGIocatori (vedi sopra)
	 */
	public void inviaColoreGiocatorePartita(String coloreGiocatore);
	
	public void inviaBonusTurno (String colore,Integer bonus);
	
	//invia il bonus continente al giocatore che se l'e' meritato. Ma non so se questo serve
	public void inviaBonusContinente (String colore, String nomeContinente, Integer bonus);
	
	//questo viene chiamato quando è stata aggiunta un unità
	public void aggiuntaUnita (String colore, String nomeTerritorio, Integer numeroUnitaAggiunte);
	
	public void rimossaUnita (String colore, String nomeTerritorio, Integer numeroUnitaRimosse);
	
	public void assegnaArmateInizioPartita(Integer numeroArmate);
	
	public void assegnaArmateTurno (Integer numeroArmate);
	
	//invia il segnale di posizionare le armate. Forse è inutile (incorporato in quelli sopra)
	//public void posizionaArmate(Integer numeroArmate); 
	
	//invia comando di difendersi poichè è stato attaccato. 
	//Potremmo anche passargli come paramentro
	//torna il valore dei dadi che ha lanciato il difensore
	public ArrayList<Integer> difenditi(String nomeTerritorioAttaccante, ArrayList<Integer> dadiAttaccanti); 
	
	public void risultatoCombattimento(Integer numeroArmatePerse, Integer numeroArmateDistrutte);
	
	public void risultatoPartita (ArrayList<Integer> punteggiFinali);
	
	public Colori scegliColore(ArrayList<Colori> coloriDisponibili); 
	
	public void comunicaTerritoriPosizioneArmate(ArrayList<TerritorioNONUSARE>territoriPosseduti, Integer numeroArmate, Integer timer);

	public boolean attendiMossa(Integer timer);
	
	public boolean settaggioArmateInizioTurno(Integer numeroArmate, Integer tempo);
}
